/**
 * the dcrm models namespace
 * @external 'nxl.models'
 */

var models = nxl.models;

if(!models){
    throw new Error('nxl.models namespace not imported before');
}

//Models class alias
var LogSettings = models.LogSettings;


/* OData Query: https://msdn.microsoft.com/en-us/library/gg309461(v=crm.7).aspx */
var RetrievedLogs = new Array();
var AnalyzedLogs = new Array();
var CurrentViewLogs = new Array();
var NameOrderBy = "time";
var BOrderBy = true;
var SeverityLevel = new Array("Debug", "Information", "Warning", "Error");
var LogsEntity = "PluginTraceLog";
var QueryTopNumber = 10;
var BasicQuery = "$select=MessageName,PrimaryEntity,PerformanceExecutionStartTime,MessageBlock&$orderby=PerformanceExecutionStartTime desc&$top=" + QueryTopNumber.toString();
var CurrentQueryOption = BasicQuery;
var SeletedLevel = "";
var SeletedUserName = "";
var SeletedMessage = "";
var SkipNumber = 0;
var LogLineIndex = 0;
var RetriveLogsIndex = 0;
var BSetPageNumber = true;
var OnePageNumber = 30;


function InitLogpanelAndSeachPanle(){

	var divLogTitle=document.getElementById("u5044");
	var divLogContect=document.getElementById("logsblock");
	var divSearchPanel=document.getElementById("u5071");
	var base = document.getElementById("base");
	divSearchPanel.style.top="10px";
	divLogTitle.style.top="300px";
	divLogContect.style.top="400px";
	base.style["height"] = "1100px";

	resizeWindow();
}

function LoadLogSetting(){
    SDK.REST.retrieveMultipleRecords(nxlStorageEntity, '$select=nxl_name,nxl_datatype,nxl_enabled,nxl_content&$filter=nxl_datatype/Value eq 280240005')
	.then(successRetrieveLogSetting)
	.then(renderLogLevelSelect);
}

/**
 * @typedef {{ name: string, datatype: number|string, enabled: boolean|string, content: string }} SecureResult
 * @typedef { { results: Array<SecureResult>, isCompleted: boolean, nextQueryOption: string }} multiRecords
 * @param {multiRecords} result 
 */
function successRetrieveLogSetting(result){

    var results = result ? result.results : undefined;
    var isCompleted = result ? result.isCompleted : undefined;
    var nextQueryOption = result ? result.nextQueryOption : '';    
    
	if(!results || results.length > 1){
		throw new Error('logsetting is invalid');
	}

	var logSetting = results[0];

	if(logSetting){

		var logSettingName = logSetting.nxl_name;
		var logSettingEnabled = logSetting.nxl_enabled;
		var logSettingType = logSetting.nxl_datatype;
		var logSettingContent = logSetting.nxl_content;

		var newLogSetting = new LogSettings();
		newLogSetting.parseFromString(logSettingContent);

		return new Promise(function(resolve, reject){
			if(typeof resolve === 'function'){
				resolve(newLogSetting);
			}
		});
	}
	else{

		return new Promise(function(resolve, reject){});
	}
}

/**
 * 
 * 
 * @param {LogSetting} logSetting 
 */
function renderLogLevelSelect(logSetting){

	var logLevel = logSetting.logLevel;
	var hasMatched = false;
	var logLevelSelectEl = document.getElementById('setting_loglevel');

    for(var i = 0; i < logLevelSelectEl.options.length; i++){
		
		var curOption = logLevelSelectEl.options[i];
		if(curOption && curOption.value.trim().toLowerCase() === logLevel.trim().toLowerCase()){

			logLevelSelectEl.selectedIndex = i;
			hasMatched = true;
			break;
		}
	}

	if(hasMatched){
		EnableLog();
	}
	else{
		DisableLog();
	}
}

function onCompleteLogSetting(){
	
}

function SaveLogSetting(){

	var iDisplayTop=GetCenterAxisTop(200);
	var iDisplayLeft=GetCenterAxisLeft(400);
	var popupDialog = document.getElementById("popupDialog");
	popupDialog.style["visibility"] = "visible";
	popupDialog.style["display"] = "block";
	var workonDiv = document.getElementById("workingon");
	workonDiv.style["top"]=iDisplayTop+"px";
	workonDiv.style["left"]=iDisplayLeft+"px";
	workonDiv.style["visibility"] = "visible";
	workonDiv.style["display"] = "block";

	var logLevel = document.getElementById("setting_loglevel");

	if(getLogChecked()){
		EnableLog();
	}
	else{
		DisableLog();
	}

	var logSetting = new LogSettings(logLevel.value);
	var logSettingJSON = {};
	
	logSettingJSON.nxl_name = 'NXLLogSettings';
	logSettingJSON.nxl_datatype = { Value: 280240005 };
	logSettingJSON.nxl_enabled = true;
	logSettingJSON.nxl_content = logSetting.serializeToString();

	SDK.REST.createRecord(logSettingJSON, nxlStorageEntity)
	.then(function(record){

		var workonDiv = document.getElementById("workingon");
		workonDiv.style["visibility"] = "hidden";
		workonDiv.style["display"] = "none";	
		var AlertDiv = document.getElementById("saveAlert");
		AlertDiv.style["visibility"] = "visible";
		AlertDiv.style["display"] = "block";
		AlertDiv.style["top"]=iDisplayTop+"px";
		AlertDiv.style["left"]=iDisplayLeft+"px";
		var successAlertContent = document.getElementById("alertsuccessContent");
		successAlertContent.style["visibility"] = "visible";
		successAlertContent.style["display"] = "block";

	}, function(error){

		var workonDiv = document.getElementById("workingon");
		workonDiv.style["visibility"] = "hidden";
		workonDiv.style["display"] = "none";	
		var AlertDiv = document.getElementById("saveAlert");
		AlertDiv.style["visibility"] = "visible";
		AlertDiv.style["display"] = "block";
		AlertDiv.style["top"]=iDisplayTop+"px";
		AlertDiv.style["left"]=iDisplayLeft+"px";
		var errorAlertContent = document.getElementById("alertErrorContent");
		errorAlertContent.style["visibility"] = "visible";
		errorAlertContent.style["display"] = "block";
	});
}

// Page Load. 
function LoadLogs() {
	InitLogpanelAndSeachPanle();
	RetrieveMultipleRecords(LogsEntity, BasicQuery);
}

function RetrieveMultipleRecords(type, options)
{
	RetrievedLogs = new Array();
	LogLineIndex = 0;
	RetriveLogsIndex = 0;
	SDK.REST.retrieveMultipleRecords(type, options)
	.then(successRetrieveLogs)
	.then(onCompleteRetrieveLogs);
}

/**
 * @typedef { { results: Array<SecureResult>, isCompleted: boolean, nextQueryOption: string }} multiRecords
 * @param {multiRecords} result
 */
function successRetrieveLogs(result) {

    var results = result ? result.results : undefined;
    var isCompleted = result ? result.isCompleted : undefined;
    var nextQueryOption = result ? result.nextQueryOption : '';    

	if(results && results.length > 0){

		var logCount = results.length;
		for(var i = 0; i < logCount; i++){

			RetrievedLogs.push(results[i]);
		}
	}

    if(!isCompleted && nextQueryOption){

        return SDK.REST.retrieveMultipleRecords(LogsEntity, nextQueryOption).then(successRetrieveLogs);
    }
    
    if(isCompleted){

        return new Promise(function(resolve, reject){
            if(typeof resolve === 'function'){
                resolve();
            }
        });
    }
}

function onCompleteRetrieveLogs() {
	var bDraw = true;
	if(RetrievedLogs.length > 0)
	{	
		AnalyseLogs(RetrievedLogs);
		if(CurrentViewLogs.length < OnePageNumber && RetrievedLogs.length == QueryTopNumber) // Get more logs from OData.
		{	
			bDraw = false;
			ReGetRetrieveLogs();
		}	
	}
	if(bDraw)
	{
		DrawLogs(CurrentViewLogs);
		DisableSearchBtn(false);		
	}
}

function errorNextLabsStorage(error) {
	
	DrawLogs(CurrentViewLogs);
}

function ReGetRetrieveLogs() {	
	var newSkipNum = SkipNumber + QueryTopNumber;	
	if(-1 != CurrentQueryOption.indexOf("&$skip=" + SkipNumber))
	{
		CurrentQueryOption = CurrentQueryOption.replace("&$skip=" + SkipNumber, "&$skip=" + newSkipNum);
	}
	else
	{
		CurrentQueryOption = CurrentQueryOption + "&$skip=" + newSkipNum;
	}
	SkipNumber = newSkipNum;
	RetrieveMultipleRecords(LogsEntity, CurrentQueryOption);		
}	

function AnalyseLogs(sourceLogs) {
	var logsNum = CurrentViewLogs.length;
	for (var i = RetriveLogsIndex; i < sourceLogs.length; i++) {			
		var event = sourceLogs[i].MessageName;
		var entity = sourceLogs[i].PrimaryEntity;
		var time = sourceLogs[i].PerformanceExecutionStartTime;				
		var lines = sourceLogs[i].MessageBlock.trim().split('\n');
		var userName = lines[0].substring(4).trim(); // "NXL:User name".
		
		if(SeletedUserName != "" && SeletedUserName.toLowerCase() != userName.toLowerCase()) 
		{
			// User name is not matched. 
			continue;
		}
		
		if(i > RetriveLogsIndex)
		{
			LogLineIndex = 0;
		}
		for (var k = LogLineIndex; k < lines.length; k++) {
			var lineStr = lines[k];
			var pos = lineStr.indexOf(':');
			if(pos != -1)
			{
				var level = lineStr.substring(0, pos).trim();
				var message = lineStr.substring(pos + 1).trim();
				if((SeletedMessage != "" && -1 == message.toLowerCase().indexOf(SeletedMessage.toLowerCase())) 
					|| (SeletedLevel != "" && SeletedLevel.toLowerCase() != level.toLowerCase())) 
				{
					// Message or severity level is not matched. 
					continue;
				}
				if(level == "Debug" || level == "Information" || level == "Warning" || level == "Error")
				{
					var log = new Object();
					log.event = event;
					log.entity = entity;
					log.time = time;
					log.username = userName;
					log.level = level;
					log.message = message;				
					AnalyzedLogs.push(log);
					CurrentViewLogs.push(log);
					logsNum++;
					if(logsNum >= OnePageNumber)
					{
						RetriveLogsIndex = i;
						LogLineIndex = k + 1;
						return;
					}					
				}
			}
		}		
	}
}

// Turning page to view.
function OnPrePage() {
	BSetPageNumber = false;	
	var prePage = document.getElementById("PrePage");	
	var nextPage = document.getElementById("NextPage");
	prePage.disabled = true;
	nextPage.disabled = true;
	var pageNumber = document.getElementById("u5133");
	var numbers = pageNumber.innerText.split("-");
	var begin = new Number(numbers[0]);
	var end = new Number(numbers[1]);
	end = begin - 1;	
	begin = begin - OnePageNumber;
	if(begin < 1)
	{
		begin = 1;
	}
	CurrentViewLogs = AnalyzedLogs.slice(begin - 1, end);
	pageNumber.innerText = begin.toString() + "-" + end.toString();
	DrawLogs(CurrentViewLogs);
	if(begin == 1)
	{
		prePage.disabled = true;
	}
	else
	{
		prePage.disabled = false;
	}
	nextPage.disabled = false;
	BSetPageNumber = true;
}

function OnNextPage() {	
	CurrentViewLogs = new Array(); 
	var prePage = document.getElementById("PrePage");	
	var nextPage = document.getElementById("NextPage");
	prePage.disabled = true;
	nextPage.disabled = true;
	var pageNumber = document.getElementById("u5133");
	var numbers = pageNumber.innerText.split("-");
	var begin = new Number(numbers[0]);
	var end = new Number(numbers[1]);
	begin = end + 1;
	
	if(AnalyzedLogs.length <= begin - 1)
	{
		onCompleteRetrieveLogs();
	}
	else
	{
		if(AnalyzedLogs.length - begin + 1 < OnePageNumber)
		{
			CurrentViewLogs = AnalyzedLogs.slice(begin - 1);			
		}
		else
		{
			CurrentViewLogs = AnalyzedLogs.slice(begin - 1, begin - 1 + OnePageNumber);
		}
		DrawLogs(CurrentViewLogs);
	}	
}

function SetPageNumber() {
	var prePage = document.getElementById("PrePage");
	var nextPage = document.getElementById("NextPage");
	var pageNumber = document.getElementById("u5133");
	var numbers = pageNumber.innerText.split("-");
	var begin = new Number(numbers[0]);
	var end = new Number(numbers[1]);
	if(begin == 0)
	{
		begin = 1;
		prePage.disabled = true;
	}
	else
	{
		begin = end + 1;
		prePage.disabled = false;
	}
	
	if(CurrentViewLogs.length < OnePageNumber)
	{
		nextPage.disabled = true;
	}
	else
	{
		nextPage.disabled = false;
	}
	
	if(CurrentViewLogs.length > 0)
	{
		end = end + CurrentViewLogs.length;
		pageNumber.innerText = begin.toString() + "-" + end.toString();		
	}
	else if(begin > OnePageNumber)
	{
		nextPage.disabled = true;
		end = begin;
		pageNumber.innerText = begin.toString() + "-" + end.toString();
	}
}
	
/* MouseOver and MouseOut event */
function AdvancedSearchMouseOver() {
	var advancedSearch = document.getElementById("Advanced Search");
	advancedSearch.style.cssText  = "cursor: pointer; color:rgba(196, 85, 0, 1); border:none; background-color:white; text-decoration:underline";
}

function AdvancedSearchMouseOut() {
	var advancedSearch = document.getElementById("Advanced Search");
	advancedSearch.style.cssText = "cursor: pointer; color:rgb(0, 102, 192); border:none; background-color:white;";
}

function BasicSearchMouseOver() {
	var basicSearch = document.getElementById("Basic Search");
	basicSearch.style.cssText = "cursor: pointer; color:rgba(196, 85, 0, 1); border:none; background-color:white; text-decoration:underline";
}

function BasicSearchMouseOut() {
	var basicSearch = document.getElementById("Basic Search");
	basicSearch.style.cssText = "cursor: pointer; color:rgb(0, 102, 192); border:none; background-color:white;";
}

// Basic Search for "message search" and "view options".
function BasicSearchLogs() {
	BasicSearchRetrieve();
}

//function ChangeView() {
//	BasicSearchRetrieve();
//}

function BasicSearchRetrieve() {
	CurrentQueryOption = BasicQuery;
	ResetBeforeSearch();
	SetBasicSearchFilter();	
	RetrieveMultipleRecords(LogsEntity, CurrentQueryOption);
}

function FormatUTCTime(time) {
    var format = new Array();
    format.push(time.getUTCMonth() + 1);
	format.push(time.getUTCDate());
	format.push(time.getUTCHours());
	format.push(time.getUTCMinutes());
	format.push(time.getUTCSeconds());
  
	var fmtStr = new Array();
    for (var i = 0; i < format.length; i++)
    {
		var keyStr = format[i].toString();
		if(keyStr.length == 1)
		{
			keyStr = "0" + keyStr;
		}
		fmtStr.push(keyStr);
	}
	
	var fmt = time.getUTCFullYear().toString() + "-" + fmtStr[0] + "-" + fmtStr[1] + "T" + fmtStr[2] + ":" + fmtStr[3] + ":" + fmtStr[4];
    return fmt;
}

function SetBasicSearchFilter() {
	var viewTime = document.getElementById("u5073_input");	
	var date = new Date();	
	var optionInd = viewTime.options.selectedIndex;
	var optionValue = viewTime.options[optionInd].value;
	var timeMs = 0;
	
	if (optionValue == "Last 5 min")
	{
		timeMs = date.getTime() - 5 * 60 *1000;
	}
	else if(optionValue == "Last 1 hour")
	{
		timeMs = date.getTime() - 60 * 60 *1000;	
	}
	else if(optionValue == "Last 10 hours")
	{
		timeMs = date.getTime() - 10 * 60 * 60 *1000;		
	}
	else if(optionValue == "Last 1 day")
	{
		timeMs = date.getTime() -  24 * 60 * 60 *1000;		
	}
	else if(optionValue == "Last 7 days")
	{
		timeMs = date.getTime() -  7 * 24 * 60 * 60 *1000;		
	}
	var queryOption = "";
	if(timeMs != 0)
	{
		var beginTime = new Date(timeMs);
		var fmt = FormatUTCTime(beginTime);
		queryOption = "PerformanceExecutionStartTime gt datetime'" + fmt + "'";
	}
	
	var searchInput = document.getElementById("SearchBasicInput");
	var searchString = searchInput.value;
	if(searchString != "")
	{
		SeletedMessage = searchString;
		if(queryOption != "")
		{
			queryOption = queryOption + " and ";
		}
		queryOption = queryOption + "substringof('" + searchString + "', MessageBlock)";
	}
	if(queryOption != "")
	{
		CurrentQueryOption = CurrentQueryOption + "&$filter=" + queryOption;
	}
}

function ResetBeforeSearch() {
	var pageNumber = document.getElementById("u5133");
	pageNumber.innerText = "0-0";
	var prePage = document.getElementById("PrePage");
	var nextPage = document.getElementById("NextPage");
	prePage.disabled = true;
	nextPage.disabled = true;
	
	AnalyzedLogs = new Array();
	CurrentViewLogs = new Array();
	
	NameOrderBy = "time";
	BOrderBy = true;
	SeletedMessage = "";
	SeletedLevel = "";
	SeletedUserName	= "";
	SkipNumber = 0;
	LogLineIndex = 0;
	RetriveLogsIndex = 0;
}

/* Swap basic search and advanced search */
function AdvancedSearchClick(){
	var basicSearch = document.getElementById("u5071_state0");
	var advancedSearch = document.getElementById("u5071_state1");
	advancedSearch.style.cssText = "";
	advancedSearch.style["visibility"] = "visible";
	advancedSearch.style["display"] = "block";
	basicSearch.style["visibility"] = "hidden";
	basicSearch.style["display"] = "none";
	var divLogTitle=document.getElementById("u5044");
	var divLogContect=document.getElementById("logsblock");
	var divSearchPanel=document.getElementById("u5071");
	var base = document.getElementById("base");
	divSearchPanel.style.top="225px";
	divLogTitle.style.top="502px";
	divLogContect.style.top="604px";
	base.style["height"] = "1300px";
}

function BasicSearchClick(){
	var basicSearch = document.getElementById("u5071_state0");
	var advancedSearch = document.getElementById("u5071_state1");
	advancedSearch.style["visibility"] = "hidden";
	advancedSearch.style["display"] = "none";
	basicSearch.style.cssText = "";
	basicSearch.style["visibility"] = "visible";
	basicSearch.style["display"] = "block";
	SeletedUserName = "";
	
	InitLogpanelAndSeachPanle();
}

function SearchReset(){
	//var time = document.getElementById("u5071_state0");
	var level = document.getElementById("u5100_input");
	var event = document.getElementById("u5111_input");
	var user = document.getElementById("SearchUser");	
	var entity = document.getElementById("SearchEntity");
	var message = document.getElementById("SearchMessage");
	var beginDate = document.getElementById("BeginDate");
	var beginTime = document.getElementById("BeginTime");
	var endDate = document.getElementById("EndDate");
	var endTime = document.getElementById("EndTime");
	level.options[0].selected = true;
	event.options[0].selected = true;
	beginTime.options[0].selected = true;
	endTime.options[0].selected = true;
	user.value = "";
	entity.value = "";
	message.value = "";
	beginDate.value = "";
	endDate.value = "";
}

function AdvancedSearchTime(queryOption)
{
	var beginDate = document.getElementById("BeginDate");
	var beginTime = document.getElementById("BeginTime");
	var endDate = document.getElementById("EndDate");
	var endTime = document.getElementById("EndTime");
	var fmt = "";
	if(beginDate.value != "")
	{
		var hours = beginTime.options[beginTime.selectedIndex].value;
		fmt = beginDate.value + "T" + hours + ":00:00";
		if(queryOption != "")
		{
			queryOption += " and ";
		}
		queryOption += "PerformanceExecutionStartTime gt datetime'" + fmt + "'";
	}
	if(endDate.value != "")
	{
		var hours = endTime.options[endTime.selectedIndex].value;
		fmt = endDate.value + "T" + hours + ":00:00";
		if(queryOption != "")
		{
			queryOption += " and ";
		}
		queryOption += "PerformanceExecutionStartTime lt datetime'" + fmt + "'";
	}
	return queryOption; 
}

function AdvancedSearchLogs(){
	ResetBeforeSearch();	
	SetAdvancedSearchFilter();
	DisableSearchBtn(true);
	RetrieveMultipleRecords(LogsEntity, CurrentQueryOption);
}

function DisableSearchBtn(disable){
	
	disable = !!disable;

	var searchBtn = document.getElementById('SearchAdvance');

	if(searchBtn){
		searchBtn.disabled = disable;
	}
	else{
		console.log('DisableSearchBtn failed,');
	}
}

function GetStringFilterOption(options, filterName, filterValue) {
	var filterOptions = options;
	if(filterOptions == "")
	{
		filterOptions = filterName + " eq '" + filterValue + "'";
	}
	else
	{
		filterOptions = filterOptions + " and " + filterName +  " eq '" + filterValue + "'";
	}
	
	return filterOptions;
}

function SetAdvancedSearchFilter() {
	CurrentQueryOption = BasicQuery;
	var level = document.getElementById("u5100_input");
	var event = document.getElementById("u5111_input");
	var user = document.getElementById("SearchUser");	
	var entity = document.getElementById("SearchEntity");
	var message = document.getElementById("SearchMessage");
	
	var levelInd = level.options.selectedIndex;
	var eventInd = event.options.selectedIndex;
	var levelValue= level.options[levelInd].value;
	var eventValue = event.options[eventInd].value;
	var entityValue = entity.value;
	
	if(levelValue != "Any")
	{
		SeletedLevel = levelValue;
	}
	SeletedUserName = user.value;
	var messageValue= message.value;
	SeletedMessage = messageValue;	

	var filterOptions = "";
	if(messageValue != "")
	{
		filterOptions = "substringof('" + messageValue + "', MessageBlock)";		
	}
	
	if(eventValue != "Any")
	{
		filterOptions = GetStringFilterOption(filterOptions, "MessageName", eventValue);	
	}
	if(entityValue != "")
	{
		filterOptions = GetStringFilterOption(filterOptions, "PrimaryEntity", entityValue);		
	}
	
	filterOptions = AdvancedSearchTime(filterOptions);
	
	if(filterOptions != "")
	{
		CurrentQueryOption = CurrentQueryOption + "&$filter=" + filterOptions;
	}	
}

/* Logs OrderBy */
function OrderByTime(){
	SearchOrderby("time", "PerformanceExecutionStartTime");
}

function OrderByLevel(){
	OrderBy("level");
}

function OrderByEvent(){
	SearchOrderby("event", "MessageName");
}

function OrderByUser(){
	OrderBy("user");
}

function OrderByEntity(){
	SearchOrderby("entity", "PrimaryEntity");
}

function OrderByMessage(){
	OrderBy("message");
}

function ResetBeforeOrderby() {
	var pageNumber = document.getElementById("u5133");
	pageNumber.innerText = "0-0";
	
	AnalyzedLogs = new Array();
	CurrentViewLogs = new Array();
	
	SkipNumber = 0;
	LogLineIndex = 0;
	RetriveLogsIndex = 0;
	
	var endInd = CurrentQueryOption.indexOf("&$skip=");
	if(-1 != endInd)
	{
		CurrentQueryOption = CurrentQueryOption.substring(0, endInd);
	}
}

function SearchOrderby(name, orderObj) {
	if(NameOrderBy == name)
	{
		BOrderBy = !BOrderBy;
	}
	else
	{
		BOrderBy = true; 
		NameOrderBy = name;
	}
	var orderby = "&$orderby=" + orderObj;
	if(!BOrderBy)
	{
		orderby = orderby + " desc";
	}
	var beginInd = CurrentQueryOption.indexOf("&$orderby");
	var endInd = CurrentQueryOption.indexOf("&$", beginInd + 2);
	var oldOrderby = CurrentQueryOption.substring(beginInd, endInd);
	
	ResetBeforeOrderby();
	CurrentQueryOption = CurrentQueryOption.replace(oldOrderby, orderby);
	RetrieveMultipleRecords(LogsEntity, CurrentQueryOption);
}

function OrderBy(name){
	if(NameOrderBy == name)
	{
		BOrderBy = !BOrderBy;
	}
	else
	{
		BOrderBy = true; 
		NameOrderBy = name;
	}

	var temp = new Object();
	var bRefresh = false;
    for (var i = CurrentViewLogs.length - 1; i > 0; --i)
    {
        for (var j = 0; j < i; ++j)
        {
            if (Compare(CurrentViewLogs[j], CurrentViewLogs[j + 1], name))
            {
				bRefresh = true; 
                temp = CurrentViewLogs[j];
                CurrentViewLogs[j] = CurrentViewLogs[j + 1];
                CurrentViewLogs[j + 1] = temp;
            }
        }
    }
	if(bRefresh)
	{
		BSetPageNumber = false;
		DrawLogs(CurrentViewLogs);
		BSetPageNumber = true;
	}
}

function Compare(before, next, name)
{
	var bSwap = false;
	if(name == "level")
	{
		bSwap = BOrderBy ? ConvertLevel(before.level) > ConvertLevel(next.level) : ConvertLevel(before.level) < ConvertLevel(next.level);		
	}
	else if(name == "user")
	{
		bSwap = BOrderBy ? before.username.toLowerCase() > next.username.toLowerCase() : before.username.toLowerCase() < next.username.toLowerCase();
	}
	else if(name == "message")
	{
		bSwap = BOrderBy ? before.message.toLowerCase() > next.message.toLowerCase() : before.message.toLowerCase() < next.message.toLowerCase();
	}
	
	return bSwap;
}

function ConvertLevel(level){
	var index = 0;
	for(var i = 0; i < SeverityLevel.length; i++)
	{
		if(SeverityLevel[i] == level)
		{
			index = i;
			break;
		}
	}
	return index;	
}

/* Draw logs */
function DrawLogs(logs) {
	var root = document.getElementById("logsblock");
	root.innerHTML = "";			
	
	var logsRecord = document.getElementById("u5046");
	if(logs.length == 0)
	{
		logsRecord.innerText = "No records found";
	}
	else
	{
		if(SeletedUserName != "")
		{
			//logsRecord.innerText = logs.length + " entries found for \"" + SeletedUserName + "\"";
			logsRecord.innerText = "";
		}
		else
		{
			//logsRecord.innerText = logs.length + " entries found for \"All Users\"";
			logsRecord.innerText = "";
		}
	}
	
	if(BSetPageNumber)
	{
		SetPageNumber();
	}
	
	var flag;
	var nexttopv = 0;
	for (var i = 0; i < logs.length; i++) {
		nexttopv = nexttopv + DrawOneLine(root, nexttopv, logs[i]);
	}		
}

function DrawOneLine(root, index, log) {
	var divTime = DrawTime(root, index, log.time);	
	var divLevel = DrawMessageLevel(root, index, log.level);
	var divEvent = DrawEvent(root, index, log.event);
	var divUsername = DrawUsername(root, index, log.username);
	var divEntity = DrawEntity(root, index, log.entity);
	var divMsg = DrawMessage(root, index, log.message);

	var maxoffset = Math.max.call(null,divTime.offsetHeight,divLevel.offsetHeight,
		divEvent.offsetHeight,divUsername.offsetHeight,divEntity.offsetHeight,divMsg.offsetHeight);
	
	divTime.style["height"] = maxoffset;
	divLevel.style["height"] = maxoffset;
	divEvent.style["height"] = maxoffset;
	divUsername.style["height"] = maxoffset;
	divEntity.style["height"] = maxoffset;
	divMsg.style["height"] = maxoffset;
	
	var div3 = document.createElement("div");
	div3.style["clear"] = "both";

	root.appendChild(div3);
	
	return maxoffset;
}

function DrawTime(root, index, time) {
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "0px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "173px";
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(246, 246, 246, 1)";
	div1.className = "ax_default shape2";
	
	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "153px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = time;

	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function DrawMessageLevel(root, index, level) {	
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";	
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "172px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "154px";
	if (level == "Warning") {
		div1.style["color"] = "#FF9900";
	} else if (level == "Error") {
		div1.style["color"] = "#FF0000";
	} else {
		div1.style["color"] = "#000000";
	}
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(254, 255, 254, 1)";
	div1.className = "ax_default shape2";
	
	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "134px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = level;
	
	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function DrawEvent(root, index, evt) {
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";	
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "325px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "154px";
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(246, 246, 246, 1)";
	div1.className = "ax_default shape2";
	
	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "134px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = evt;
	
	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function DrawUsername(root, index, name) {
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";	
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "478px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "154px";
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(246, 246, 246, 1)";
	div1.className = "ax_default shape2";

	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "134px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = name;

	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function DrawEntity(root, index, entity) {
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";	
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "631px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "135px";
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(254, 255, 254, 1)";
	div1.className = "ax_default shape2";

	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "115px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = entity;

	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function DrawMessage(root, index, message) {
	var div1 = document.createElement("div");
	div1.style["box-sizing"] = "border-box";
	div1.style["border-width"] = "1px";	
	div1.style["border-style"] = "solid";
	div1.style["border-color"] = "rgba(234, 234, 234, 1)";
	div1.style["border-radius"] = "0px";
	div1.style["-moz-box-shadow"] = "none";	
	div1.style["-webkit-box-shadow"] = "none";		
	div1.style["box-shadow"] = "none";	
	div1.style["position"] = "absolute";
	div1.style["left"] = "765px";
	div1.style["top"] = index + "px";
	div1.style["width"] = "349px";
	div1.style["background"] = "inherit";
	div1.style["background-color"] = "rgba(254, 255, 254, 1)";
	div1.className = "ax_default shape2";
	
	var div2 = document.createElement("div");
	div2.style["float"] = "middle";
	div2.style["width"] = "309px";
	div2.style["margin"] = "0 auto";		
	div2.style["padding"] = "10px 0px";
	div2.style["word-wrap"] = "break-word";
	div2.style["text-align"] = "left";
	div2.innerHTML = message;

	root.appendChild(div1);	
	div1.appendChild(div2);
	
	return div1;
}

function getLogChecked()
{
	var result=false;
	var enabledState = document.getElementById("enabledState");
	var disaledState = document.getElementById("disaledState");
	if(enabledState.style["visibility"] == "visible"&&disaledState.style["visibility"] == "hidden")
	{
		result=true;
	}
	return result;
}
function DisableLog()
{
	var enabledState = document.getElementById("enabledState");
	var disaledState = document.getElementById("disaledState");
	var disabledDiv = document.getElementById("disabledDiv");
	enabledState.style["visibility"] = "hidden";
	enabledState.style["display"] = "none";
	disaledState.style["visibility"] = "visible";
	disaledState.style["display"] = "block";
	disabledDiv.style["visibility"] = "visible";
	disabledDiv.style["display"] = "block";
}
function EnableLog()
{
	var enabledState = document.getElementById("enabledState");
	var disaledState = document.getElementById("disaledState");
	var disabledDiv = document.getElementById("disabledDiv");
	enabledState.style["visibility"] = "visible";
	enabledState.style["display"] = "block";
	disaledState.style["visibility"] = "hidden";
	disaledState.style["display"] = "none";
	disabledDiv.style["visibility"] = "hidden";
	disabledDiv.style["display"] = "none";
}
function changeState(obj){
	var enabledState = document.getElementById("enabledState");
	var disaledState = document.getElementById("disaledState");
	var disabledDiv = document.getElementById("disabledDiv");
	if(enabledState.style["visibility"] == "hidden"){
		enabledState.style["visibility"] = "visible";
		enabledState.style["display"] = "block";
		disaledState.style["visibility"] = "hidden";
		disaledState.style["display"] = "none";
		disabledDiv.style["visibility"] = "hidden";
		disabledDiv.style["display"] = "none";
	}else{
		enabledState.style["visibility"] = "hidden";
		enabledState.style["display"] = "none";
		disaledState.style["visibility"] = "visible";
		disaledState.style["display"] = "block";
		disabledDiv.style["visibility"] = "visible";
		disabledDiv.style["display"] = "block";
	}
}

function closeAlert(){
	var popupDialog = document.getElementById("popupDialog");
	popupDialog.style["visibility"] = "hidden";
	popupDialog.style["display"] = "none";
	var AlertDiv = document.getElementById("saveAlert");
	AlertDiv.style["visibility"] = "hidden";
	AlertDiv.style["display"] = "none";
	var errorAlertContent = document.getElementById("alertErrorContent");
	errorAlertContent.style["visibility"] = "hidden";
	errorAlertContent.style["display"] = "none";
	var successAlertContent = document.getElementById("alertsuccessContent");
	successAlertContent.style["visibility"] = "hidden";
	successAlertContent.style["display"] = "none";
}

function ClickHelp(){
	var pageurl = window.location.href;
	var intsplitedchar = pageurl.lastIndexOf("/");

	if(intsplitedchar < 0){
		console.log("can not find /");
		dialogBox.Show("Open help page failed!");
		return;
	}

	var headpart = pageurl.substring(0, intsplitedchar);
	var helpurl = headpart + "/nxl_logshelp.html";

	//window.open(helpurl,"_blank");
	window.open("https://emdcrm-help.pep.cloudaz.com/viewing_log_files.html");
}