#!/bin/bash
#
# DESCRIPTION
#	Invoke release build
#
# USAGE:
#	Steps to invoke this script.
#		export NLEXTERNALDIR=<path>
#		export BUILD_NUMBER=<#>
#		source setEnv
#		./buildRelease
#
# HUDSON BUILD:
#	cd $WORKSPACE
#	export NLEXTERNALDIR=c:/hudson/jobs/external_latest/workspace
#	source setEnv
#	./buildRelease
#
# Build Options:
#	make -f build/Makefile.compile || exit $?
#	make -f build/Makefile.compile compile install || exit $?
#
# Publish Options:
#	make -f build/Makefile.publish TYPE=release || exit $?
#	make -f build/Makefile.publish TYPE=release spe archive || exit $


LOG_FILE=buildRelease.log
BUILD_MANIFEST_FILE=build.manifest

(
set -x
# Extract Perforce Workspace and Hudson info (only if running on Hudson)
if [ "X${JENKINS_HOME}" != "X" -a -f ${JENKINS_HOME}/jobs/${JOB_NAME}/config.xml ]; then
	build/getGitWorkspaceInfo.pl ${JENKINS_HOME}/jobs/${JOB_NAME}/config.xml
fi

# Prepare environment
./configure --type=release || exit $?
source build.config

########
# BEAR TO DO: Update prepareManifest.pl script to accept the following parameters and change
# AssemblyInfo.cs files with the version information passed with these parameters
########
# Call to update version in AppManifest.xml and NLSPOLEventHandler\Makefile
perl $NLBUILDROOT/build/prepareManifest.pl \
			--buildType=$CONFIG_TYPE \
			--buildNum=$BUILD_NUMBER \
			--buildVersion_Major=${VERSION_MAJOR} \
			--buildVersion_Minor=${VERSION_MINOR} \
			--buildVersion_Fix=${VERSION_FIX}
#perl $NLBUILDROOT/build/prepareManifest.pl --buildType=$CONFIG_TYPE --buildNum=$BUILD_NUMBER

# Prepare dependencies
make -f build/Makefile.xlib

# Compile Dynamic CRM Enforcer code
make -f build/Makefile.compile compile || exit $?

WORKSPACE=${WORKSPACE//\\//}
cd ${WORKSPACE}

##
# Let's do some code-signing for files going into the final Dynamic CRM Enforcer package
# Since this is a Release build - we will be signing using the NextLabs production certificate
# Code-signing can be turned off from shell if we define a shell variable NOCODESIGN
##
#this project we ignore code-signing
if [ "X${NOCODESIGN}" = "X"  ] ; then
	# Check for the availability of the NextLabs certificate
	if [ -f "C:/release/bin/NextLabs.pfx" ] ; then
		export NEXTLABS_CERT_FILE="C:/release/bin/NextLabs.pfx"
	else
		echo "ERROR: Unable to find NextLabs.pfx certificate for code-signing. If you want to turn off code-signing, define a shell variable NOCODESIGN."
		exit -1
fi

# Check for the availability of the Microsoft cross-cert
if [ -f "C:/release/bin/DigiCertAssuredIDRootCA.cer" ] ; then
	export MSCV_CROSS_CERT_FILE="C:/release/bin/DigiCertAssuredIDRootCA.cer"
else
	echo "ERROR: Unable to find Microsoft cross-cert required for release build code-signing. If you want to turn off code-signing, define a shell #		variable NOCODESIGN."
	exit -1
fi

# Check for the availability of Win8SDK's signtool
if [ -f "C:/Program Files (x86)/Windows Kits/8.1/bin/x64/signtool.exe" ] ; then
	SIGNTOOL_OFFICIAL_TOOL="C:/Program Files (x86)/Windows Kits/8.1/bin/x64/signtool.exe"
else
	echo "ERROR: Unable to find signtool command required for code-signing. If you want to turn off code-signing, define a shell variable NOCODESIGN."
	exit -1
fi

##
# Find all signable files and send them for signing
# Currently supported formats: exe, dll
##
cd ${WORKSPACE}
"${SIGNTOOL_OFFICIAL_TOOL}" sign \
	/ac "${MSCV_CROSS_CERT_FILE}" \
	/f "${NEXTLABS_CERT_FILE}" \
	/p IiVf1itvOrqJ \
	/n 'NextLabs Inc.' \
	/tr http://timestamp.digicert.com \
	/fd sha256 \
	`find ${WORKSPACE}/bin -type f | egrep -e '\.(exe|dll)$' | xargs cygpath --mixed` 
fi

#Copy dll file to install folder
#if [ -f ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2015.dll ]
#then
#		cp -pf ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2015.dll ${WORKSPACE}/Install/DCRM2015/NextLabsDCRMSolution_2015_Managed/PluginAssemblies/PlugIn_DCRM2015-2B1E3491-8965-43AB-A39C-AB0382536EB2
#		cp -pf ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2015.dll ${WORKSPACE}/Install/DCRM2015/NextLabsDCRMSolution_2015_Unmanaged/PluginAssemblies/PlugIn_DCRM2015-2B1E3491-8965-43AB-A39C-AB0382536EB2
#else
#		echo "ERROR:NextLabs.CRMEnforcer2015.dll was NOT found"
#fi
if [ -f ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2016.dll ]
then
		cp -apf ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2016.dll ${WORKSPACE}/Install/DCRM2016/NextLabsDCRMSolution_2016_Managed/PluginAssemblies/NextLabsCRMEnforcer2016-EAA8EB3F-0B82-411B-88C3-7C6D2AC69358/NextLabsCRMEnforcer2016.dll
		cp -apf ${WORKSPACE}/bin/release_win_x64/NextLabs.CRMEnforcer2016.dll ${WORKSPACE}/Install/DCRM2016/NextLabsDCRMSolution_2016_Unmanaged/PluginAssemblies/NextLabsCRMEnforcer2016-EAA8EB3F-0B82-411B-88C3-7C6D2AC69358/NextLabsCRMEnforcer2016.dll

else
	echo "ERROR:NextLabs.CRMEnforcer2016.dll was NOT found"
fi

#cd ${WORKSPACE}/Install/DCRM2015/NextLabsDCRMSolution_2015_Managed
#zip -q -r ${WORKSPACE}/Install/DCRM2015/NextLabs_EM4MS_CRM_2015_${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUILD}.zip ./

#cd ${WORKSPACE}/Install/DCRM2015/NextLabsDCRMSolution_2015_Unmanaged
#zip -q -r ${WORKSPACE}/Install/DCRM2015/NextLabs_Entitlement_Management_2015_Unmanaged_${VERSION_BUILD}_${VERSION_BUILD_SHORT}_${BUILD_DATE_LONG} ./

cd ${WORKSPACE}/Install/DCRM2016/NextLabsDCRMSolution_2016_Managed
zip -q -r ${WORKSPACE}/Install/DCRM2016/NextLabs_EM4MS_CRM_2016_${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUILD}.zip ./

cd ${WORKSPACE}/Install/DCRM2016/NextLabsDCRMSolution_2016_Unmanaged
zip -q -r ${WORKSPACE}/Install/DCRM2016/NextLabs_EM4MS_CRM_2016_Unmanaged_${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUILD}.zip ./

cd ${WORKSPACE}/
#make -f build/Makefile.compile install || exit $?

# Publish packages and artifacts to BODA only if PUBLISH_TO_BODA environment variable is set
if [ "X${PUBLISH_TO_BODA}" = "XYes" -o "X${PUBLISH_TO_BODA}" = "Xyes" -o "X${PUBLISH_TO_BODA}" = "XYES" -o "X${PUBLISH_TO_BODA}" = "X1" ]
then
	# Publish installers and artifacts
	make -f build/Makefile.publish TYPE=release BUILD_DATE=${BUILD_DATE_LONG} VERSION_BUILD_SHORT=${VERSION_BUILD_SHORT} || exit $?
fi

# Create and publish build manifest
build/createBuildManifest.pl $LOG_FILE > $BUILD_MANIFEST_FILE || exit $?
# Publish packages and artifacts to BODA only if PUBLISH_TO_BODA environment variable is set
if [ "X${PUBLISH_TO_BODA}" = "XYes" -o "X${PUBLISH_TO_BODA}" = "Xyes" -o "X${PUBLISH_TO_BODA}" = "XYES" -o "X${PUBLISH_TO_BODA}" = "X1" ]
then
	make -f build/Makefile.publish TYPE=release manifest || exit $?
else
	echo "PUBLISH_TO_BODA environment variable is NOT set!!"
fi

set +x

echo
echo
echo "####################### BUILD MANIFEST CONTENTS ########################"
cat ${WORKSPACE}/${BUILD_MANIFEST_FILE}
echo "########################################################################"
) 2>&1 | tee $LOG_FILE

exit ${PIPESTATUS[0]}
